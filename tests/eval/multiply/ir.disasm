Globals:

Function: noop
block 0
  var return_value: void = None
  var n: void = None
  var temp2: int = Some(Int(2))
  n = temp2
  free(temp2)
  free(n)
  free(return_value)
  -> block 1

block 1
  -> return

Function: multiply
block 0
  var return_value: int = None
  var number: int = None
  var n: int = None
  var add: bool = None
  if add -> block 3 else block 13

block 1
  -> return

block 2
  free(add)
  free(n)
  free(number)
  free(return_value)
  -> block 1

block 3
  var acc: void = None
  var temp5: int = Some(Int(0))
  acc = temp5
  free(temp5)
  -> block 5

block 4
  return_value = acc
  free(acc)
  free(add)
  free(n)
  free(number)
  free(return_value)
  -> block 11

block 5
  var temp6: int = Some(Int(0))
  var temp7: void = None
  temp7 = n > temp6
  free(temp6)
  if temp7 -> block 7 else block 8

block 6
  free(temp7)
  -> block 5

block 7
  var temp8: void = None
  temp8 = acc + number
  acc = temp8
  free(temp8)
  var temp9: void = None
  free(temp9)
  var temp10: int = Some(Int(1))
  var temp11: void = None
  temp11 = n - temp10
  free(temp10)
  n = temp11
  free(temp11)
  var temp12: void = None
  free(temp12)
  -> block 6

block 8
  free(temp7)
  -> block 9

block 9
  -> block 4

block 10
  -> block 6

block 11
  -> block 1

block 12
  -> block 2

block 13
  var temp13: void = None
  var temp14: int = None
  var temp15: int = None
  var temp16: void = None
  temp16 = call noop()
  temp13 = temp16
  free(temp16)
  free(temp15)
  free(temp14)
  free(temp13)
  var temp17: void = None
  temp17 = number * n
  return_value = temp17
  free(temp17)
  free(add)
  free(n)
  free(number)
  free(return_value)
  -> block 14

block 14
  -> block 1

block 15
  -> block 2

