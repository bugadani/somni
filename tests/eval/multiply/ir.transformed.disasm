Globals:

Function: noop
block 0
  var return_value: void = None
  free(return_value)
  -> block 1

block 1
  -> return

Function: multiply
block 0
  var return_value: int = None
  var number: int = None
  var n: int = None
  var add: bool = None
  var temp4: void = None
  var temp5: void = None
  if add -> block 2 else block 8

block 1
  -> return

block 2
  var temp6: void = None
  var acc: int = Some(MaybeSignedInt(0))
  var temp9: void = None
  -> block 4

block 3
  return_value = acc
  free(temp9)
  free(acc)
  free(temp6)
  free(temp5)
  free(temp4)
  free(add)
  free(n)
  free(number)
  free(return_value)
  -> block 1

block 4
  var temp10: void = None
  var temp11: void = None
  var temp12: int = Some(MaybeSignedInt(0))
  var temp13: bool = None
  temp13 = n > temp12
  free(temp12)
  if temp13 -> block 6 else block 7

block 5
  free(temp13)
  free(temp11)
  free(temp10)
  -> block 4

block 6
  acc = acc + number
  var temp17: int = Some(MaybeSignedInt(1))
  n = n - temp17
  free(temp17)
  -> block 5

block 7
  free(temp13)
  free(temp11)
  free(temp10)
  -> block 3

block 8
  var temp23: int = None
  var temp24: int = None
  var temp25: void = None
  temp25 = call noop()
  free(temp25)
  free(temp24)
  free(temp23)
  return_value = number * n
  free(temp5)
  free(temp4)
  free(add)
  free(n)
  free(number)
  free(return_value)
  -> block 1

