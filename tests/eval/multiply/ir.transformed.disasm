Globals:

Functions:
Function: noop
block 0
  var return_value: Int = None
  var n: Int = None
  var temp2: Int = Some(Int(2))
  n = temp2
  free(temp2)
  var temp3: Int = Some(Int(0))
  return_value = temp3
  free(temp3)
  free(n)
  free(return_value)
  -> block 1

block 1
  -> return
Function: multiply
block 0
  var return_value: Int = None
  var number: Int = None
  var n: Int = None
  var add: Bool = None
  if add -> block 2 else block 8

block 1
  -> return

block 2
  var acc: Int = None
  var temp5: Int = Some(Int(0))
  acc = temp5
  free(temp5)
  -> block 4

block 3
  return_value = acc
  free(acc)
  free(add)
  free(n)
  free(number)
  free(return_value)
  -> block 1

block 4
  var temp6: Int = Some(Int(0))
  var temp7: Bool = None
  temp7 = n > temp6
  free(temp6)
  if temp7 -> block 6 else block 7

block 5
  free(temp7)
  -> block 4

block 6
  var temp8: Int = None
  temp8 = acc + number
  acc = temp8
  free(temp8)
  var temp9: Void = None
  free(temp9)
  var temp10: Int = Some(Int(1))
  var temp11: Int = None
  n = n - temp10
  free(temp10)
  free(temp11)
  var temp12: Void = None
  free(temp12)
  -> block 5

block 7
  free(temp7)
  -> block 3

block 8
  var temp13: Void = None
  temp13 = call noop()
  free(temp13)
  var temp14: Int = None
  temp14 = number * n
  return_value = temp14
  free(temp14)
  free(add)
  free(n)
  free(number)
  free(return_value)
  -> block 1
