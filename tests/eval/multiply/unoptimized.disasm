Function: noop() -> void
  Code:
    0: push U64(2)
    1: store Local(VariableIndex(0), true)
    2: push U64(0)
    3: return
Function: multiply(u64, u64, bool) -> u64
  Code:
    0:  load Local(VariableIndex(2), true)
    1:  jump_forward_if 25 false
    2:  push U64(0)
    3:  store Local(VariableIndex(3), true)
    4:  loop_start 20
    5:  push U64(0)
    6:  load Local(VariableIndex(1), true)
    7:  less than
    8:  jump_forward_if 13 false
    9:  load Local(VariableIndex(3), true)
    10: load Local(VariableIndex(0), true)
    11: add
    12: store Local(VariableIndex(3), true)
    13: push Void
    14: pop
    15: load Local(VariableIndex(1), true)
    16: push U64(1)
    17: subtract
    18: store Local(VariableIndex(1), true)
    19: push Void
    20: pop
    21: jump_forward 1
    22: break
    23: continue
    24: load Local(VariableIndex(3), true)
    25: return
    26: jump_forward 6
    27: call noop() -> void
    28: pop
    29: load Local(VariableIndex(0), true)
    30: load Local(VariableIndex(1), true)
    31: multiply
    32: return
Function: main() -> bool
  Code:
    0:  push U64(10)
    1:  push U64(5)
    2:  push Bool(false)
    3:  call multiply(u64, u64, bool) -> u64
    4:  push U64(10)
    5:  push U64(5)
    6:  push Bool(true)
    7:  call multiply(u64, u64, bool) -> u64
    8:  equals
    9:  call_named external assert
    10: return
