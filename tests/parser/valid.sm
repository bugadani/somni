var answer: int = 42;
var global_var: int = 100;
var global_var_signed: signed = 100;
var global_var_signed_negative: signed = -100;

// Simple function
fn my_function() {}

// Function with return type
fn my_function() -> void {}

// Function with argument
fn my_function(arg: type) -> type {}

// Function with argument and trailing comma
fn my_function(arg1: type,) -> type {}

// Function with multiple arguments
fn my_function(arg1: type, arg2: type) -> type {
}

// Function with reference arguments
fn my_function(
    // A comment here
    arg1: &type,
    // A comment there
    arg2: &type) ->
        // A comment after return arrow
        type {
    // comment in body
}

// Function with empty return statement
fn my_function() -> void {
    return;
}

// Some statements
fn my_function() -> void {
    if fun {
        return;
    } else {
        if without_else {}
        loop {
            break;
        }

        while false {
            continue;
        }
    }
}

fn add(x: i32, y: i32) -> i32 {
    return x + y;
}

fn double(x: i32) -> i32 {
    var result = x * add(1, --1);
    return result;
}

fn triple(x: i32) -> i32 {
    var result = x + double(x);
    return result;
}

fn locals_with_type(x: i32) -> i32 {
    var result: u64 = x + double(x);
    return result;
}

fn quadruple(x: i32) -> i32 {
    return double(two() * x);
}

fn unary(x: bool) -> bool {
    return !x;
}

fn locals(x: i32) -> i32 {
    var str = "bar";
    var n = 2;
    return double(two() * !!x);
}

fn take_by_reference(x: &i32) -> i32 {
    return -*x;
}

fn pass_by_reference(x: i32) -> i32 {
    return take_by_reference(&x);
}

// comment at the end
